#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from baltimore import Baltimore
from baltimore.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  void heartbeat()')
  print('  void amplifierOn()')
  print('  void amplifierOff()')
  print('  bool amplifierState()')
  print('  void play(string fileName)')
  print('  void stop()')
  print('  void test()')
  print('  void hourChimeOn()')
  print('  void hourChimeOff()')
  print('  bool hourChimeState()')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Baltimore.Client(protocol)
transport.open()

if cmd == 'heartbeat':
  if len(args) != 0:
    print('heartbeat requires 0 args')
    sys.exit(1)
  pp.pprint(client.heartbeat())

elif cmd == 'amplifierOn':
  if len(args) != 0:
    print('amplifierOn requires 0 args')
    sys.exit(1)
  pp.pprint(client.amplifierOn())

elif cmd == 'amplifierOff':
  if len(args) != 0:
    print('amplifierOff requires 0 args')
    sys.exit(1)
  pp.pprint(client.amplifierOff())

elif cmd == 'amplifierState':
  if len(args) != 0:
    print('amplifierState requires 0 args')
    sys.exit(1)
  pp.pprint(client.amplifierState())

elif cmd == 'play':
  if len(args) != 1:
    print('play requires 1 args')
    sys.exit(1)
  pp.pprint(client.play(args[0],))

elif cmd == 'stop':
  if len(args) != 0:
    print('stop requires 0 args')
    sys.exit(1)
  pp.pprint(client.stop())

elif cmd == 'test':
  if len(args) != 0:
    print('test requires 0 args')
    sys.exit(1)
  pp.pprint(client.test())

elif cmd == 'hourChimeOn':
  if len(args) != 0:
    print('hourChimeOn requires 0 args')
    sys.exit(1)
  pp.pprint(client.hourChimeOn())

elif cmd == 'hourChimeOff':
  if len(args) != 0:
    print('hourChimeOff requires 0 args')
    sys.exit(1)
  pp.pprint(client.hourChimeOff())

elif cmd == 'hourChimeState':
  if len(args) != 0:
    print('hourChimeState requires 0 args')
    sys.exit(1)
  pp.pprint(client.hourChimeState())

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
